{"ast":null,"code":"const parser = require(\"engine.io-parser\");\n\nconst Emitter = require(\"component-emitter\");\n\nconst {\n  installTimerFunctions\n} = require(\"./util\");\n\nconst debug = require(\"debug\")(\"engine.io-client:transport\");\n\nclass Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api public\n   */\n\n\n  onError(msg, desc) {\n    const err = new Error(msg);\n    err.type = \"TransportError\";\n    err.description = desc;\n    this.emit(\"error\", err);\n    return this;\n  }\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n\n\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n\n\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {\n      // this might happen if the transport was silently closed in the beforeunload event handler\n      debug(\"transport is not open, discarding packets\");\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @api private\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    this.emit(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api private\n   */\n\n\n  onData(data) {\n    const packet = parser.decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   */\n\n\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @api private\n   */\n\n\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n\n}\n\nmodule.exports = Transport;","map":null,"metadata":{},"sourceType":"script"}